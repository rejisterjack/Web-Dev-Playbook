// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  borrows Borrow[]
}

model Author {
  id        String    @id @default(cuid())
  name      String
  bio       String?
  birthDate DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  books Book[]
}

model Book {
  id            String  @id @default(cuid())
  title         String
  isbn          String  @unique
  summary       String?
  publishedYear Int
  language      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId String
  author   Author @relation(fields: [authorId], references: [id])

  categories Category[] @relation("BookCategories")

  copies BookCopy[]
}

model BookCopy {
  id          String  @id @default(cuid())
  bookId      String
  location    String
  isAvailable Boolean @default(true)

  book Book @relation(fields: [bookId], references: [id])

  borrow Borrow?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Borrow {
  id         String    @id @default(cuid())
  userId     String
  bookCopyId String    @unique
  borrowDate DateTime  @default(now())
  dueDate    DateTime  @default(dbgenerated("now() + interval '7 days'"))
  returnDate DateTime?

  user     User     @relation(fields: [userId], references: [id])
  bookCopy BookCopy @relation(fields: [bookCopyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id   String @id @default(cuid())
  name String

  books Book[] @relation("BookCategories")
}
